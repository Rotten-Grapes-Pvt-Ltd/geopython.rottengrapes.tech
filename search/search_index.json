{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Master GeoPython","text":"<p>This repository contains the course content for Master Geospatial Analysis using python, a comprehensive course designed to teach you the fundamentals and advanced concepts of geospatial programming using Python</p>"},{"location":"#course-overview","title":"Course Overview","text":"<p>This course is live on Udemy and covers a wide range of topics from installation and setup to advanced geospatial analysis techniques. The course is structured to provide a hands-on learning experience, with practical examples and real-world applications.</p>"},{"location":"intro-to-python/installation/","title":"Installing Python","text":"<p>Whether you're a beginner stepping into programming or a data enthusiast diving into automation, Python is a great language to start with. In this post, we\u2019ll explore various ways to install Python, both locally on your computer and through online platforms, so you can choose the one that works best for you. </p>"},{"location":"intro-to-python/installation/#installing-python-locally","title":"Installing Python Locally","text":"<p>Let's explore steps to install Python on various Operating Systems. Let's start by downloading the latest package by either hovering on Downloads and downloading package or by visiting https://www.python.org/downloads/</p> <p></p>"},{"location":"intro-to-python/installation/#installing-python-on-windows","title":"Installing python on Windows","text":"<p>Start by downloading latest .exe installer from https://www.python.org/downloads/windows/ Once downloaded, double click on it to open installer </p> <p></p> <p>After checking both boxes, click on Customize Installation and checkmark everything</p> <p></p> <p>click on Next , then checkmark as per following screenshots</p> <p></p> <p>and then click on Install. After installation is done, you can open Command Prompt and confirm if installation is done by typing</p> <pre><code>python --version\n</code></pre> <p>and if you see following result, it means your installation is done ! </p> <p></p>"},{"location":"intro-to-python/installation/#installing-python-on-ubuntu","title":"Installing python on Ubuntu","text":"<p>Open terminal and enter following command</p> <pre><code>sudo apt install python3\n</code></pre> <p>enter your password.</p> <p></p> <p>after installing python3, we also need to install pip which manages the packages in python. To install pip, execute following command</p> <pre><code>sudo apt install python3-pip\n</code></pre> <p>You can check if the installations are done correctly by typing </p> <p><pre><code>python3 --version #to check python installation\npip3 --version # to check pip installation\n</code></pre> </p>"},{"location":"intro-to-python/installation/#installing-python-on-macos","title":"Installing python on MacOS","text":"<p>Installing Python on MacOS X is similar to Windows, you can download the installer and following the commands </p> <p></p> <p>once the installation is done, check on terminal</p> <p></p>"},{"location":"intro-to-python/installation/#hosted-python-environments-no-installation-required","title":"Hosted Python Environments (No Installation Required!)","text":"<p>If you don\u2019t want to install anything yet, you can run Python in the cloud. Ideal for learning or quick testing.</p>"},{"location":"intro-to-python/installation/#google-colab","title":"Google Colab","text":"<ul> <li>URL: colab.research.google.com</li> <li>Free, cloud-based Jupyter notebooks with access to GPU</li> <li>Great for data science and ML</li> </ul>"},{"location":"intro-to-python/installation/#replit","title":"Replit","text":"<ul> <li>URL: replit.com</li> <li>Supports Python and many other languages</li> <li>Includes a file manager, debugger, and terminal</li> </ul>"},{"location":"intro-to-python/installation/#jupyter-notebook-via-binder","title":"Jupyter Notebook (via Binder)","text":"<ul> <li>URL: mybinder.org</li> <li>Turn any GitHub repo into an executable notebook</li> </ul>"},{"location":"intro-to-python/intro-to-packages/","title":"Python Packages","text":"<p>One of the reasons why Python is so loved and respected language is its vast ecosystem of packages and libraries. These packages are developed by the community and are available on PyPI (Python Package Index). These packages can be easily installed using <code>pip</code>, which is the package manager for Python. </p> <p>By making entry barrier low, Python has enabled developers to focus on solving problems rather than reinventing the wheel.</p> <p>E.g. If you are a researcher and you found out an easier way to loop through a list with million elements, you can create a package and share it with the community. This way, other developers can use your package and benefit from your work. This might seem like a small contribution, but it can have a huge impact since this can be used by applications such as web servers, data analysis tools, machine learning libraries, etc. and without you knowing it, your package might be used by thousands of developers around the world..</p> <p>This is the power of open source and community driven development. </p> <p>If you want to check the list of packages available globally, you can check the PyPI website</p> <p></p>"},{"location":"intro-to-python/intro-to-packages/#installing-packages","title":"Installing Packages","text":"<p>We are living in a time where we have packages for almost everything. From web development to data analysis, from machine learning to game development, there is a package for everything. if you are a data scientist, you might be using packages like <code>pandas</code>, <code>numpy</code>, <code>matplotlib</code>, etc. If you are a web developer, you might be using packages like <code>Django</code>, <code>Flask</code>, etc. If you are a game developer, you might be using packages like <code>Pygame</code>, etc. </p> <p>To install a package, you can use the <code>pip</code> command followed by the package name. Make sure that you have your virtual env running before you install any package, otherwise it will be install globally, which might create conflicts. If you want to install the <code>requests</code> package, you can run the following command in your terminal:</p> <pre><code>pip install requests\n</code></pre> <p>by running this command it will install all necessary packages needed to run the <code>requests</code> package. You can also specify the version of the package that you want to install. For example, if you want to install version <code>2.25.1</code> of the <code>requests</code> package, you can run the following command:</p> <pre><code>pip install requests==2.25.1\n</code></pre> <p></p> <p>You can also install multiple packages in one go by specifying the package names separated by space. For example, if you want to install <code>requests</code>, <code>pandas</code>, and <code>numpy</code> packages, you can run the following command:</p> <pre><code>pip install requests pandas numpy\n</code></pre>"},{"location":"intro-to-python/intro-to-packages/#installing-from-requirementstxt","title":"Installing from requirements.txt","text":"<p>While working on a project, you might be using multiple packages. To make it easier to install all the packages needed for a project, you can create a <code>requirements.txt</code> file. This file contains a list of packages along with their versions that are required for your project.</p> <p>Here is an example of a <code>requirements.txt</code> file:</p> <pre><code>requests==2.25.1\npandas==1.2.3\nnumpy==1.19.5\n</code></pre> <p>Create a file named <code>requirements.txt</code> in your project directory and add the above content to it. then, to install all the packages listed in the <code>requirements.txt</code> file, you can run the following command:</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>This command will read the <code>requirements.txt</code> file and install all the packages listed in it along with their specified versions. This is a very useful way to manage dependencies for your project and ensure that everyone working on the project has the same packages installed.</p> <p></p>"},{"location":"intro-to-python/intro-to-packages/#uninstalling-packages","title":"Uninstalling Packages","text":"<p>To uninstall a package, you can use the <code>pip uninstall</code> command followed by the package name. For example, if you want to uninstall the <code>requests</code> package, you can run the following command:</p> <pre><code>pip uninstall requests\n</code></pre> <p>This will shown a prompt asking for confirmation to uninstall the package. Type <code>y</code> and press <code>Enter</code> to confirm the uninstallation.</p> <p></p>"},{"location":"intro-to-python/intro-to-packages/#listing-installed-packages","title":"Listing Installed Packages","text":"<p>To list all the packages installed in your virtual environment, you can use the <code>pip list</code> command. This will show a list of all the packages along with their versions that are currently installed in your virtual environment.</p> <pre><code>pip list\n</code></pre> <p></p>"},{"location":"intro-to-python/setup-env/","title":"Setup Python Environment","text":"<p>Once you have installed python, you can start working with it. Generally when we work with python, we install <code>External Packages</code> which are not part of standard library. These packages are developed by community and are available on PyPI (Python Package Index).  But installing these packages globally can lead to version conflicts. For example, you might have two projects, one which requires <code>pandas v1.5.0</code> and another which requires <code>pandas v2.0.0</code>. Installing both versions globally is not possible and can lead to conflicts. To avoid this, we use <code>Virtual Environments</code> which are isolated environments for each project. This way, we can have different versions of packages for different projects without any conflicts. </p>"},{"location":"intro-to-python/setup-env/#venv-virtual-environment","title":"<code>venv</code> Virtual Environment","text":""},{"location":"intro-to-python/setup-env/#creating-virtual-environment","title":"Creating Virtual Environment","text":"<p>There are several ways to create virtual environments in python. The most common way is to use <code>venv</code> module which is part of standard library. To create a virtual environment, open terminal and navigate to your project directory and run following command</p> <pre><code># if you have python installed as python3\npython -m venv myenv\n\n# else you can use python3\npython3 -m venv myenv\n</code></pre> <p>The above command will create a virtual environment named <code>myenv</code> in your project directory. You can name it anything you want. </p>"},{"location":"intro-to-python/setup-env/#activating-virtual-environment","title":"Activating Virtual Environment","text":"<p>After creating the virtual environment, you need to activate it. To activate the virtual environment, run following command</p> <pre><code># on Windows\nmyenv\\Scripts\\activate\n# on MacOS and Linux\nsource myenv/bin/activate\n</code></pre> <p>After activating the virtual environment, you will see the name of the virtual environment in your terminal prompt. This indicates that you are now working inside the virtual environment.</p> <p></p>"},{"location":"intro-to-python/setup-env/#deactivating-virtual-environment","title":"Deactivating Virtual Environment","text":"<p>To deactivate the virtual environment, simply run</p> <pre><code>deactivate\n</code></pre> <p>you can confirm this by checking the terminal prompt, it should not have the name of the virtual environment anymore.</p> <p></p>"},{"location":"intro-to-python/setup-env/#conda-virtual-environment","title":"<code>Conda</code> Virtual Environment","text":"<p>Anaconda is also a popular virtual environment management solution, it also has an open source version which can be used without any licensing cost. This is typically easy to manage and share compared to <code>venv</code>.</p> <p>Checkout Installation documentation to add conda to your system and your path.</p>"},{"location":"intro-to-python/setup-env/#creating-conda-virtual-environment","title":"Creating Conda Virtual Environment","text":"<p>To create environment at minimum you just have to pass env name, along with that you can also mention python package  or version that you want to install initially. </p> <p><pre><code># Create conda env with name `mycondaenv` and python version 3.12\nconda create -n mycondaenv python==3.12\n</code></pre> This will install all necessary packages to run python=3.12</p>"},{"location":"intro-to-python/setup-env/#activate-virtual-environment","title":"Activate Virtual Environment","text":"<p>Conda stored all packages and envs in its own directory, so you can activate the env from anywhere in your system. To activate the virtual environment, run following command</p> <p><pre><code>conda activate mycondaenv\n</code></pre> After activating the virtual environment, you will see the name of the virtual environment in your terminal prompt. This indicates that you are now working inside the virtual environment.</p>"},{"location":"intro-to-python/setup-env/#deactivate-virtual-environment","title":"Deactivate Virtual Environment","text":"<p>To deactivate conda environment, you can run the following command</p> <pre><code>conda deactivate\n</code></pre> <p>This will deactivate whatever conda environment is running currently.</p>"}]}