{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Master GeoPython","text":"<p>This repository contains the course content for Master Geospatial Analysis using python, a comprehensive course designed to teach you the fundamentals and advanced concepts of geospatial programming using Python</p>"},{"location":"#course-overview","title":"Course Overview","text":"<p>This course is live on Udemy and covers a wide range of topics from installation and setup to advanced geospatial analysis techniques. The course is structured to provide a hands-on learning experience, with practical examples and real-world applications.</p>"},{"location":"intro-to-python/dictionary/","title":"Dictionary - Basic Guide","text":""},{"location":"intro-to-python/dictionary/#what-is-a-dictionary","title":"What is a Dictionary?","text":"<p>A dictionary is a collection of key-value pairs where each key is unique and maps to a specific value. Dictionaries are ordered (as of Python 3.7+), mutable, and use curly braces <code>{}</code> with key-value pairs separated by colons.</p>"},{"location":"intro-to-python/dictionary/#creating-dictionaries","title":"Creating Dictionaries","text":"<pre><code># Empty dictionary\nempty_dict = {}\nalso_empty = dict()\n\n# Dictionary with elements\nstudent = {\"name\": \"Alice\", \"age\": 20, \"grade\": \"A\"}\nnumbers = {1: \"one\", 2: \"two\", 3: \"three\"}\nmixed = {\"string_key\": 100, 42: \"number_key\", True: \"boolean_key\"}\n\n# Creating dictionary from lists of tuples\npairs = [(\"a\", 1), (\"b\", 2), (\"c\", 3)]\nletter_dict = dict(pairs)       # {\"a\": 1, \"b\": 2, \"c\": 3}\n\n# Using keyword arguments (keys must be valid variable names)\nperson = dict(name=\"Bob\", age=25, city=\"New York\")\n</code></pre> <p>Explanation: Dictionary keys must be immutable (strings, numbers, tuples) and unique. If you use the same key twice, the second value overwrites the first. Values can be any data type and can be duplicated.</p>"},{"location":"intro-to-python/dictionary/#accessing-dictionary-elements","title":"Accessing Dictionary Elements","text":""},{"location":"intro-to-python/dictionary/#basic-access-methods","title":"Basic Access Methods","text":"<p>Using square brackets []: <pre><code>student = {\"name\": \"Alice\", \"age\": 20, \"grade\": \"A\"}\nprint(student[\"name\"])          # \"Alice\" - direct key access\nprint(student[\"age\"])           # 20\n# print(student[\"height\"])      # KeyError - key doesn't exist\n</code></pre> Explanation: Square bracket notation gives you direct access to values using their keys. If the key doesn't exist, Python raises a KeyError.</p> <p>Using get() method: <pre><code>student = {\"name\": \"Alice\", \"age\": 20, \"grade\": \"A\"}\nprint(student.get(\"name\"))      # \"Alice\" - same as student[\"name\"]\nprint(student.get(\"height\"))    # None - key doesn't exist, returns None\nprint(student.get(\"height\", \"Not specified\"))  # \"Not specified\" - custom default\n</code></pre> Explanation: The <code>get()</code> method is safer than square brackets because it returns <code>None</code> (or a default value) instead of raising an error when a key doesn't exist.</p>"},{"location":"intro-to-python/dictionary/#modifying-dictionaries","title":"Modifying Dictionaries","text":""},{"location":"intro-to-python/dictionary/#adding-and-updating-elements","title":"Adding and Updating Elements","text":"<p>Direct assignment: <pre><code>student = {\"name\": \"Alice\", \"age\": 20}\nstudent[\"grade\"] = \"A\"          # Add new key-value pair\nstudent[\"age\"] = 21             # Update existing value\nprint(student)                  # {\"name\": \"Alice\", \"age\": 21, \"grade\": \"A\"}\n</code></pre> Explanation: You can add new keys or update existing ones using square bracket assignment. If the key exists, its value is updated; if not, a new key-value pair is created.</p> <p>update() method: <pre><code>student = {\"name\": \"Alice\", \"age\": 20}\nstudent.update({\"grade\": \"A\", \"major\": \"Computer Science\"})  # Add multiple from dict\nstudent.update([(\"gpa\", 3.8), (\"year\", 2)])                # Add from list of tuples\nstudent.update(credits=120, status=\"active\")                # Add using keyword arguments\n</code></pre> Explanation: The <code>update()</code> method can add multiple key-value pairs at once. It accepts dictionaries, lists of tuples, or keyword arguments. Existing keys get updated, new keys get added.</p> <p>setdefault() method: <pre><code>student = {\"name\": \"Alice\", \"age\": 20}\ngrade = student.setdefault(\"grade\", \"B\")    # Returns \"B\" and adds \"grade\": \"B\"\nage = student.setdefault(\"age\", 25)         # Returns 20, doesn't change existing value\nprint(student)                              # {\"name\": \"Alice\", \"age\": 20, \"grade\": \"B\"}\n</code></pre> Explanation: <code>setdefault()</code> adds a key with a default value only if the key doesn't already exist. It returns the existing value if the key is present, or the new default value if it's not.</p>"},{"location":"intro-to-python/dictionary/#removing-elements","title":"Removing Elements","text":"<p>del statement: <pre><code>student = {\"name\": \"Alice\", \"age\": 20, \"grade\": \"A\", \"major\": \"CS\"}\ndel student[\"grade\"]            # Remove specific key-value pair\n# del student[\"height\"]         # KeyError - key doesn't exist\nprint(student)                  # {\"name\": \"Alice\", \"age\": 20, \"major\": \"CS\"}\n</code></pre> Explanation: The <code>del</code> statement permanently removes a key-value pair from the dictionary. If the key doesn't exist, it raises a KeyError.</p> <p>pop() method: <pre><code>student = {\"name\": \"Alice\", \"age\": 20, \"grade\": \"A\"}\nremoved_grade = student.pop(\"grade\")        # Returns \"A\" and removes the key\nmissing = student.pop(\"height\", \"Unknown\")  # Returns \"Unknown\" (default), no error\n# student.pop(\"height\")                     # KeyError - no default provided\n</code></pre> Explanation: The <code>pop()</code> method removes a key and returns its value. You can provide a default value to return if the key doesn't exist, preventing KeyError.</p> <p>popitem() method: <pre><code>student = {\"name\": \"Alice\", \"age\": 20, \"grade\": \"A\"}\nlast_item = student.popitem()   # Returns (\"grade\", \"A\") - removes last inserted item\nprint(student)                  # {\"name\": \"Alice\", \"age\": 20}\n\nempty_dict = {}\n# empty_dict.popitem()          # KeyError - can't pop from empty dictionary\n</code></pre> Explanation: The <code>popitem()</code> method removes and returns the last inserted key-value pair as a tuple. In older Python versions (&lt;3.7), it removed an arbitrary item. Raises KeyError on empty dictionary.</p> <p>clear() method: <pre><code>student = {\"name\": \"Alice\", \"age\": 20, \"grade\": \"A\"}\nstudent.clear()                 # Remove all key-value pairs\nprint(student)                  # {} - empty dictionary\n</code></pre> Explanation: The <code>clear()</code> method removes all elements from the dictionary, leaving it empty but not deleting the dictionary variable itself.</p>"},{"location":"intro-to-python/dictionary/#dictionary-methods-for-information","title":"Dictionary Methods for Information","text":""},{"location":"intro-to-python/dictionary/#getting-keys-values-and-items","title":"Getting Keys, Values, and Items","text":"<p>keys() method: <pre><code>student = {\"name\": \"Alice\", \"age\": 20, \"grade\": \"A\"}\nall_keys = student.keys()       # dict_keys(['name', 'age', 'grade'])\nkey_list = list(student.keys()) # ['name', 'age', 'grade'] - convert to list\n</code></pre> Explanation: The <code>keys()</code> method returns a view of all dictionary keys. It's not a list, but you can convert it to a list or iterate over it. The view updates automatically if the dictionary changes.</p> <p>values() method: <pre><code>student = {\"name\": \"Alice\", \"age\": 20, \"grade\": \"A\"}\nall_values = student.values()   # dict_values(['Alice', 20, 'A'])\nvalue_list = list(student.values())  # ['Alice', 20, 'A'] - convert to list\n</code></pre> Explanation: The <code>values()</code> method returns a view of all dictionary values. Like keys(), it returns a view object that reflects changes to the original dictionary.</p> <p>items() method: <pre><code>student = {\"name\": \"Alice\", \"age\": 20, \"grade\": \"A\"}\nall_items = student.items()     # dict_items([('name', 'Alice'), ('age', 20), ('grade', 'A')])\nitem_list = list(student.items())    # [('name', 'Alice'), ('age', 20), ('grade', 'A')]\n</code></pre> Explanation: The <code>items()</code> method returns a view of all key-value pairs as tuples. This is particularly useful when you need both keys and values together.</p>"},{"location":"intro-to-python/dictionary/#checking-dictionary-contents","title":"Checking Dictionary Contents","text":"<p>Membership testing with 'in': <pre><code>student = {\"name\": \"Alice\", \"age\": 20, \"grade\": \"A\"}\nprint(\"name\" in student)        # True - checks if key exists\nprint(\"Alice\" in student)       # False - checks keys, not values\nprint(\"height\" in student)      # False - key doesn't exist\n\n# Check if value exists (slower operation)\nprint(\"Alice\" in student.values())     # True - checks values\n</code></pre> Explanation: The <code>in</code> operator checks if a key exists in the dictionary (not values). To check for values, use <code>in</code> with the <code>values()</code> method, but this is slower than key checking.</p> <p>Length: <pre><code>student = {\"name\": \"Alice\", \"age\": 20, \"grade\": \"A\"}\nprint(len(student))             # 3 - number of key-value pairs\n</code></pre> Explanation: The <code>len()</code> function returns the number of key-value pairs in the dictionary.</p>"},{"location":"intro-to-python/dictionary/#dictionary-operations-and-methods","title":"Dictionary Operations and Methods","text":""},{"location":"intro-to-python/dictionary/#copying-dictionaries","title":"Copying Dictionaries","text":"<p>copy() method (shallow copy): <pre><code>original = {\"name\": \"Alice\", \"scores\": [85, 92, 78]}\nshallow_copy = original.copy()\n\nshallow_copy[\"name\"] = \"Bob\"            # Changes only the copy\nshallow_copy[\"scores\"].append(95)       # Changes both (shared list object)\n\nprint(original)     # {\"name\": \"Alice\", \"scores\": [85, 92, 78, 95]}\nprint(shallow_copy) # {\"name\": \"Bob\", \"scores\": [85, 92, 78, 95]}\n</code></pre> Explanation: The <code>copy()</code> method creates a shallow copy. Changes to immutable values (strings, numbers) only affect the copy, but changes to mutable objects (lists, dictionaries) affect both copies because they share the same object reference.</p> <p>Using dict() constructor: <pre><code>original = {\"a\": 1, \"b\": 2, \"c\": 3}\ncopy_dict = dict(original)      # Creates shallow copy\nanother_copy = {**original}     # Dictionary unpacking - also shallow copy\n</code></pre> Explanation: Both <code>dict()</code> constructor and dictionary unpacking <code>{**dict}</code> create shallow copies of the original dictionary.</p>"},{"location":"intro-to-python/dictionary/#dictionary-comprehensions","title":"Dictionary Comprehensions","text":"<p>Basic dictionary comprehension: <pre><code># Create dictionary from range\nsquares = {x: x**2 for x in range(1, 6)}   # {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\n\n# Transform existing dictionary\nstudent = {\"name\": \"alice\", \"city\": \"new york\", \"major\": \"cs\"}\nuppercase = {key: value.upper() for key, value in student.items()}\n# {\"name\": \"ALICE\", \"city\": \"NEW YORK\", \"major\": \"CS\"}\n</code></pre> Explanation: Dictionary comprehensions create new dictionaries using a concise syntax. The format is <code>{key_expression: value_expression for item in iterable}</code>.</p> <p>Dictionary comprehension with conditions: <pre><code>numbers = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}\neven_only = {key: value for key, value in numbers.items() if value % 2 == 0}\n# {\"b\": 2, \"d\": 4}\n\n# Filter by key\nlong_keys = {key: value for key, value in numbers.items() if len(key) &gt; 1}\n</code></pre> Explanation: You can add conditions to filter which items are included in the new dictionary. The condition comes after the <code>for</code> clause.</p>"},{"location":"intro-to-python/dictionary/#working-with-nested-dictionaries","title":"Working with Nested Dictionaries","text":""},{"location":"intro-to-python/dictionary/#accessing-nested-data","title":"Accessing Nested Data","text":"<p><pre><code>students = {\n    \"alice\": {\"age\": 20, \"grades\": {\"math\": 85, \"science\": 92}},\n    \"bob\": {\"age\": 22, \"grades\": {\"math\": 78, \"science\": 88}}\n}\n\n# Accessing nested values\nalice_age = students[\"alice\"][\"age\"]                    # 20\nalice_math = students[\"alice\"][\"grades\"][\"math\"]        # 85\n\n# Safe access with get()\ncharlie_age = students.get(\"charlie\", {}).get(\"age\", \"Unknown\")  # \"Unknown\"\n</code></pre> Explanation: Access nested dictionary values by chaining square brackets or <code>get()</code> methods. Using <code>get()</code> with empty dict as default prevents KeyError when intermediate keys don't exist.</p>"},{"location":"intro-to-python/dictionary/#updating-nested-dictionaries","title":"Updating Nested Dictionaries","text":"<p><pre><code>students = {\n    \"alice\": {\"age\": 20, \"grades\": {\"math\": 85, \"science\": 92}}\n}\n\n# Add new nested data\nstudents[\"alice\"][\"major\"] = \"Computer Science\"\nstudents[\"alice\"][\"grades\"][\"english\"] = 90\n\n# Add new student\nstudents[\"bob\"] = {\"age\": 22, \"grades\": {\"math\": 78}}\n</code></pre> Explanation: You can add or modify nested dictionary values using multiple levels of square bracket notation.</p>"},{"location":"intro-to-python/dictionary/#dictionary-performance-and-use-cases","title":"Dictionary Performance and Use Cases","text":""},{"location":"intro-to-python/dictionary/#performance-characteristics","title":"Performance Characteristics","text":"<p>Fast Operations: - Key lookup: <code>dict[key]</code> and <code>key in dict</code> are very fast (O(1) average case) - Adding/updating: <code>dict[key] = value</code> is very fast - Deleting: <code>del dict[key]</code> is very fast</p> <p>Slower Operations: - Value lookup: <code>value in dict.values()</code> is slower (O(n)) - Finding key by value: No direct method, requires iteration</p>"},{"location":"intro-to-python/dictionary/#memory-considerations","title":"Memory Considerations","text":"<p><pre><code># Dictionaries use more memory than lists for simple data\nstudent_list = [\"Alice\", 20, \"A\"]       # Less memory\nstudent_dict = {\"name\": \"Alice\", \"age\": 20, \"grade\": \"A\"}  # More memory but more readable\n</code></pre> Explanation: Dictionaries use more memory than lists because they store keys along with values and maintain a hash table structure. However, they provide much faster key-based access.</p>"},{"location":"intro-to-python/dictionary/#common-use-cases-and-patterns","title":"Common Use Cases and Patterns","text":""},{"location":"intro-to-python/dictionary/#counting-and-grouping","title":"Counting and Grouping","text":"<p>Counting occurrences: <pre><code>text = \"hello world\"\nchar_count = {}\nfor char in text:\n    char_count[char] = char_count.get(char, 0) + 1\n# {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}\n\n# Using setdefault\nchar_count2 = {}\nfor char in text:\n    char_count2.setdefault(char, 0)\n    char_count2[char] += 1\n</code></pre></p> <p>Grouping data: <pre><code>students = [\n    {\"name\": \"Alice\", \"grade\": \"A\"},\n    {\"name\": \"Bob\", \"grade\": \"B\"},\n    {\"name\": \"Charlie\", \"grade\": \"A\"}\n]\n\nby_grade = {}\nfor student in students:\n    grade = student[\"grade\"]\n    by_grade.setdefault(grade, []).append(student[\"name\"])\n# {\"A\": [\"Alice\", \"Charlie\"], \"B\": [\"Bob\"]}\n</code></pre></p>"},{"location":"intro-to-python/dictionary/#configuration-and-settings","title":"Configuration and Settings","text":"<pre><code># Application configuration\nconfig = {\n    \"database\": {\n        \"host\": \"localhost\",\n        \"port\": 5432,\n        \"name\": \"myapp\"\n    },\n    \"debug\": True,\n    \"max_connections\": 100\n}\n\n# Access configuration values\ndb_host = config[\"database\"][\"host\"]\ndebug_mode = config.get(\"debug\", False)  # Default to False if not specified\n</code></pre>"},{"location":"intro-to-python/dictionary/#caching-and-memoization","title":"Caching and Memoization","text":"<pre><code># Simple cache for expensive calculations\ncalculation_cache = {}\n\ndef expensive_calculation(n):\n    if n in calculation_cache:\n        return calculation_cache[n]  # Return cached result\n\n    result = n ** 2 + n * 3  # Simulate expensive calculation\n    calculation_cache[n] = result  # Cache the result\n    return result\n</code></pre>"},{"location":"intro-to-python/dictionary/#data-transformation","title":"Data Transformation","text":"<pre><code># Transform list of tuples to dictionary\nraw_data = [(\"name\", \"Alice\"), (\"age\", 20), (\"grade\", \"A\")]\nstudent_dict = dict(raw_data)  # {\"name\": \"Alice\", \"age\": 20, \"grade\": \"A\"}\n\n# Swap keys and values\noriginal = {\"a\": 1, \"b\": 2, \"c\": 3}\nswapped = {value: key for key, value in original.items()}  # {1: \"a\", 2: \"b\", 3: \"c\"}\n\n# Filter and transform\nnumbers = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}\neven_squares = {key: value**2 for key, value in numbers.items() if value % 2 == 0}\n# {\"b\": 4, \"d\": 16}\n</code></pre>"},{"location":"intro-to-python/dictionary/#best-practices","title":"Best Practices","text":""},{"location":"intro-to-python/dictionary/#when-to-use-dictionaries","title":"When to Use Dictionaries","text":"<p>\u2705 Good use cases: - Key-value mappings: When you need to associate keys with values - Fast lookups: When you frequently need to find data by a unique identifier - Counting: When you need to count occurrences of items - Grouping: When you need to organize data by categories - Configuration: When you need structured settings or parameters - Caching: When you want to store results for quick retrieval</p> <p>\u274c Avoid dictionaries when: - You only need ordered data without key lookups (use lists) - You need mathematical operations on all elements (use lists/arrays) - Memory usage is critical and you don't need key-based access - All your keys are sequential integers starting from 0 (use lists)</p>"},{"location":"intro-to-python/dictionary/#key-guidelines","title":"Key Guidelines","text":"<ol> <li>Use descriptive keys: <code>student[\"first_name\"]</code> is better than <code>student[\"fn\"]</code></li> <li>Be consistent with key types: Don't mix strings and numbers as keys unless necessary</li> <li>Use <code>get()</code> for optional keys: Prevents KeyError and makes code more robust</li> <li>Consider defaultdict for complex grouping: For advanced use cases (not covered here)</li> <li>Use dictionary comprehensions: They're more readable than building dictionaries with loops</li> </ol>"},{"location":"intro-to-python/dictionary/#quick-reference-summary","title":"Quick Reference Summary","text":"Operation Syntax Description Create <code>{\"key\": \"value\"}</code> Create dictionary with initial data Access <code>dict[key]</code> or <code>dict.get(key)</code> Get value by key Add/Update <code>dict[key] = value</code> Set key to value Remove <code>del dict[key]</code> or <code>dict.pop(key)</code> Remove key-value pair Check Key <code>key in dict</code> Test if key exists Get All Keys <code>dict.keys()</code> View of all keys Get All Values <code>dict.values()</code> View of all values Get All Items <code>dict.items()</code> View of all key-value pairs Copy <code>dict.copy()</code> Create shallow copy Clear <code>dict.clear()</code> Remove all items Length <code>len(dict)</code> Number of key-value pairs <p>Example combining multiple operations: <pre><code># Create and populate dictionary\ninventory = {\"apples\": 50, \"bananas\": 30, \"oranges\": 25}\n\n# Update and add items\ninventory.update({\"grapes\": 40, \"apples\": 60})  # Update apples, add grapes\ninventory[\"mangoes\"] = 15  # Add mangoes\n\n# Check and remove items\nif \"bananas\" in inventory:\n    sold_bananas = inventory.pop(\"bananas\")  # Remove and get value\n    print(f\"Sold {sold_bananas} bananas\")\n\n# Display current inventory\nprint(f\"Current inventory has {len(inventory)} items:\")\nfor item, quantity in inventory.items():\n    print(f\"  {item}: {quantity}\")\n</code></pre></p> <p>This comprehensive guide covers all the essential dictionary operations and methods with detailed explanations, practical examples, and best practices for effective dictionary usage in Python!</p>"},{"location":"intro-to-python/installation/","title":"Installing Python","text":"<p>Whether you're a beginner stepping into programming or a data enthusiast diving into automation, Python is a great language to start with. In this post, we\u2019ll explore various ways to install Python, both locally on your computer and through online platforms, so you can choose the one that works best for you. </p>"},{"location":"intro-to-python/installation/#installing-python-locally","title":"Installing Python Locally","text":"<p>Let's explore steps to install Python on various Operating Systems. Let's start by downloading the latest package by either hovering on Downloads and downloading package or by visiting https://www.python.org/downloads/</p> <p></p>"},{"location":"intro-to-python/installation/#installing-python-on-windows","title":"Installing python on Windows","text":"<p>Start by downloading latest .exe installer from https://www.python.org/downloads/windows/ Once downloaded, double click on it to open installer </p> <p></p> <p>After checking both boxes, click on Customize Installation and checkmark everything</p> <p></p> <p>click on Next , then checkmark as per following screenshots</p> <p></p> <p>and then click on Install. After installation is done, you can open Command Prompt and confirm if installation is done by typing</p> <pre><code>python --version\n</code></pre> <p>and if you see following result, it means your installation is done ! </p> <p></p>"},{"location":"intro-to-python/installation/#installing-python-on-ubuntu","title":"Installing python on Ubuntu","text":"<p>Open terminal and enter following command</p> <pre><code>sudo apt install python3\n</code></pre> <p>enter your password.</p> <p></p> <p>after installing python3, we also need to install pip which manages the packages in python. To install pip, execute following command</p> <pre><code>sudo apt install python3-pip\n</code></pre> <p>You can check if the installations are done correctly by typing </p> <p><pre><code>python3 --version #to check python installation\npip3 --version # to check pip installation\n</code></pre> </p>"},{"location":"intro-to-python/installation/#installing-python-on-macos","title":"Installing python on MacOS","text":"<p>Installing Python on MacOS X is similar to Windows, you can download the installer and following the commands </p> <p></p> <p>once the installation is done, check on terminal</p> <p></p>"},{"location":"intro-to-python/installation/#hosted-python-environments-no-installation-required","title":"Hosted Python Environments (No Installation Required!)","text":"<p>If you don\u2019t want to install anything yet, you can run Python in the cloud. Ideal for learning or quick testing.</p>"},{"location":"intro-to-python/installation/#google-colab","title":"Google Colab","text":"<ul> <li>URL: colab.research.google.com</li> <li>Free, cloud-based Jupyter notebooks with access to GPU</li> <li>Great for data science and ML</li> </ul>"},{"location":"intro-to-python/installation/#replit","title":"Replit","text":"<ul> <li>URL: replit.com</li> <li>Supports Python and many other languages</li> <li>Includes a file manager, debugger, and terminal</li> </ul>"},{"location":"intro-to-python/installation/#jupyter-notebook-via-binder","title":"Jupyter Notebook (via Binder)","text":"<ul> <li>URL: mybinder.org</li> <li>Turn any GitHub repo into an executable notebook</li> </ul>"},{"location":"intro-to-python/intro-to-packages/","title":"Python Packages","text":"<p>One of the reasons why Python is so loved and respected language is its vast ecosystem of packages and libraries. These packages are developed by the community and are available on PyPI (Python Package Index). These packages can be easily installed using <code>pip</code>, which is the package manager for Python. </p> <p>By making entry barrier low, Python has enabled developers to focus on solving problems rather than reinventing the wheel.</p> <p>E.g. If you are a researcher and you found out an easier way to loop through a list with million elements, you can create a package and share it with the community. This way, other developers can use your package and benefit from your work. This might seem like a small contribution, but it can have a huge impact since this can be used by applications such as web servers, data analysis tools, machine learning libraries, etc. and without you knowing it, your package might be used by thousands of developers around the world..</p> <p>This is the power of open source and community driven development. </p> <p>If you want to check the list of packages available globally, you can check the PyPI website</p> <p></p>"},{"location":"intro-to-python/intro-to-packages/#installing-packages","title":"Installing Packages","text":"<p>We are living in a time where we have packages for almost everything. From web development to data analysis, from machine learning to game development, there is a package for everything. if you are a data scientist, you might be using packages like <code>pandas</code>, <code>numpy</code>, <code>matplotlib</code>, etc. If you are a web developer, you might be using packages like <code>Django</code>, <code>Flask</code>, etc. If you are a game developer, you might be using packages like <code>Pygame</code>, etc. </p> <p>To install a package, you can use the <code>pip</code> command followed by the package name. Make sure that you have your virtual env running before you install any package, otherwise it will be install globally, which might create conflicts. If you want to install the <code>requests</code> package, you can run the following command in your terminal:</p> <pre><code>pip install requests\n</code></pre> <p>by running this command it will install all necessary packages needed to run the <code>requests</code> package. You can also specify the version of the package that you want to install. For example, if you want to install version <code>2.25.1</code> of the <code>requests</code> package, you can run the following command:</p> <pre><code>pip install requests==2.25.1\n</code></pre> <p></p> <p>You can also install multiple packages in one go by specifying the package names separated by space. For example, if you want to install <code>requests</code>, <code>pandas</code>, and <code>numpy</code> packages, you can run the following command:</p> <pre><code>pip install requests pandas numpy\n</code></pre>"},{"location":"intro-to-python/intro-to-packages/#installing-from-requirementstxt","title":"Installing from requirements.txt","text":"<p>While working on a project, you might be using multiple packages. To make it easier to install all the packages needed for a project, you can create a <code>requirements.txt</code> file. This file contains a list of packages along with their versions that are required for your project.</p> <p>Here is an example of a <code>requirements.txt</code> file:</p> <pre><code>requests==2.25.1\npandas==1.2.3\nnumpy==1.19.5\n</code></pre> <p>Create a file named <code>requirements.txt</code> in your project directory and add the above content to it. then, to install all the packages listed in the <code>requirements.txt</code> file, you can run the following command:</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>This command will read the <code>requirements.txt</code> file and install all the packages listed in it along with their specified versions. This is a very useful way to manage dependencies for your project and ensure that everyone working on the project has the same packages installed.</p> <p></p>"},{"location":"intro-to-python/intro-to-packages/#uninstalling-packages","title":"Uninstalling Packages","text":"<p>To uninstall a package, you can use the <code>pip uninstall</code> command followed by the package name. For example, if you want to uninstall the <code>requests</code> package, you can run the following command:</p> <pre><code>pip uninstall requests\n</code></pre> <p>This will shown a prompt asking for confirmation to uninstall the package. Type <code>y</code> and press <code>Enter</code> to confirm the uninstallation.</p> <p></p>"},{"location":"intro-to-python/intro-to-packages/#listing-installed-packages","title":"Listing Installed Packages","text":"<p>To list all the packages installed in your virtual environment, you can use the <code>pip list</code> command. This will show a list of all the packages along with their versions that are currently installed in your virtual environment.</p> <pre><code>pip list\n</code></pre> <p></p>"},{"location":"intro-to-python/sets-tuple/","title":"Sets and Tuples","text":""},{"location":"intro-to-python/sets-tuple/#sets","title":"Sets","text":"<p>A set is a collection of unique elements. Sets automatically remove duplicates and are unordered, meaning elements don't have a fixed position.</p>"},{"location":"intro-to-python/sets-tuple/#creating-sets","title":"Creating Sets","text":"<pre><code># Empty set - must use set() function, not {} (which creates empty dict)\nmy_set = set()\n\n# Set with elements - use curly braces with comma-separated values\nfruits = {\"apple\", \"banana\", \"orange\"}\nnumbers = {1, 2, 3, 4, 5}\n\n# Creating set from a list - automatically removes duplicates\nmy_set = set([1, 2, 2, 3, 3, 4])  # Result: {1, 2, 3, 4}\n</code></pre> <p>Sets only store unique values. If you try to create a set with duplicate elements, Python automatically keeps only one copy of each element.</p>"},{"location":"intro-to-python/sets-tuple/#basic-set-methods","title":"Basic Set Methods","text":""},{"location":"intro-to-python/sets-tuple/#adding-elements","title":"Adding Elements","text":"<p>add() method: <pre><code>fruits = {\"apple\", \"banana\"}\nfruits.add(\"orange\")        # Adds single element to the set\nprint(fruits)               # {\"apple\", \"banana\", \"orange\"}\n</code></pre>  The <code>add()</code> method adds exactly one element to the set. If the element already exists, nothing happens (no error, no duplicate).</p> <p>update() method: <pre><code>fruits = {\"apple\", \"banana\"}\nfruits.update([\"grape\", \"mango\"])    # Add multiple elements from a list\nfruits.update({\"kiwi\", \"peach\"})     # Add multiple elements from another set\nfruits.update(\"hello\")               # Adds each character: 'h', 'e', 'l', 'o'\n</code></pre>  The <code>update()</code> method can add multiple elements at once. It accepts any iterable (list, set, string, etc.). When you pass a string, each character becomes a separate element.</p>"},{"location":"intro-to-python/sets-tuple/#removing-elements","title":"Removing Elements","text":"<p>remove() method: <pre><code>fruits = {\"apple\", \"banana\", \"orange\"}\nfruits.remove(\"banana\")     # Removes \"banana\" from the set\n# fruits.remove(\"grape\")    # This would cause KeyError since \"grape\" doesn't exist\n</code></pre>  The <code>remove()</code> method deletes the specified element from the set. If the element doesn't exist, Python raises a KeyError.</p> <p>discard() method: <pre><code>fruits = {\"apple\", \"banana\", \"orange\"}\nfruits.discard(\"banana\")    # Removes \"banana\" from the set\nfruits.discard(\"grape\")     # No error even though \"grape\" doesn't exist\n</code></pre>  The <code>discard()</code> method is safer than <code>remove()</code> because it won't raise an error if the element doesn't exist. It simply does nothing.</p> <p>pop() method: <pre><code>fruits = {\"apple\", \"banana\", \"orange\"}\nremoved_fruit = fruits.pop()    # Removes and returns a random element\nprint(removed_fruit)            # Could be any of the fruits\nprint(fruits)                   # Now missing one element\n</code></pre>  The <code>pop()</code> method removes and returns an arbitrary element from the set. Since sets are unordered, you can't predict which element will be removed. If the set is empty, it raises a KeyError.</p> <p>clear() method: <pre><code>fruits = {\"apple\", \"banana\", \"orange\"}\nfruits.clear()              # Removes all elements\nprint(fruits)               # set() - empty set\n</code></pre>  The <code>clear()</code> method removes every element from the set, leaving it completely empty.</p>"},{"location":"intro-to-python/sets-tuple/#set-operations","title":"Set Operations","text":"<p>Union - combining sets: <pre><code>set1 = {1, 2, 3, 4}\nset2 = {3, 4, 5, 6}\n\n# Using union() method\nunion_set = set1.union(set2)        # Creates new set: {1, 2, 3, 4, 5, 6}\nunion_set = set1 | set2             # Same result using | operator\n</code></pre>  Union combines all unique elements from both sets. Elements that appear in both sets are only included once in the result.</p> <p>Intersection - finding common elements: <pre><code>set1 = {1, 2, 3, 4}\nset2 = {3, 4, 5, 6}\n\ncommon = set1.intersection(set2)    # Creates new set: {3, 4}\ncommon = set1 &amp; set2                # Same result using &amp; operator\n</code></pre>  Intersection returns only the elements that exist in both sets. If there are no common elements, you get an empty set.</p> <p>Difference - elements in first set but not second: <pre><code>set1 = {1, 2, 3, 4}\nset2 = {3, 4, 5, 6}\n\ndiff = set1.difference(set2)        # Creates new set: {1, 2}\ndiff = set1 - set2                  # Same result using - operator\n</code></pre>  Difference returns elements that are in the first set but not in the second set. The order matters: <code>set1 - set2</code> gives different results than <code>set2 - set1</code>.</p>"},{"location":"intro-to-python/sets-tuple/#checking-elements-and-properties","title":"Checking Elements and Properties","text":"<p>Membership testing: <pre><code>fruits = {\"apple\", \"banana\", \"orange\"}\n\nprint(\"apple\" in fruits)     # True - \"apple\" exists in the set\nprint(\"grape\" in fruits)     # False - \"grape\" doesn't exist\nprint(\"apple\" not in fruits) # False - opposite of \"in\"\n</code></pre>  The <code>in</code> operator checks if an element exists in the set. It returns <code>True</code> if found, <code>False</code> if not found. This operation is very fast with sets.</p> <p>Length and set relationships: <pre><code>fruits = {\"apple\", \"banana\", \"orange\"}\nsmall_set = {\"apple\", \"banana\"}\nbig_set = {\"apple\", \"banana\", \"orange\", \"grape\", \"mango\"}\n\nprint(len(fruits))                      # 3 - number of elements\nprint(small_set.issubset(fruits))       # True - all elements of small_set are in fruits\nprint(fruits.issuperset(small_set))     # True - fruits contains all elements of small_set\nprint(fruits.isdisjoint({1, 2, 3}))     # True - no common elements\n</code></pre></p> <ul> <li><code>len()</code> returns the number of elements in the set</li> <li><code>issubset()</code> checks if all elements of the current set exist in another set</li> <li><code>issuperset()</code> checks if the current set contains all elements of another set</li> <li><code>isdisjoint()</code> returns <code>True</code> if the sets have no common elements</li> </ul>"},{"location":"intro-to-python/sets-tuple/#tuples","title":"Tuples","text":"<p>A tuple is an ordered collection of elements that cannot be changed after creation (immutable). Unlike sets, tuples allow duplicate elements and maintain the order of elements.</p>"},{"location":"intro-to-python/sets-tuple/#creating-tuples","title":"Creating Tuples","text":"<pre><code># Empty tuple - use empty parentheses\nempty_tuple = ()\n\n# Tuple with multiple elements\ncoordinates = (3, 5)\ncolors = (\"red\", \"green\", \"blue\")\nmixed = (1, \"hello\", 3.14, True)\n\n# Single element tuple - MUST include comma!\nsingle = (42,)      # Without comma, (42) is just a number in parentheses\nalso_single = 42,   # Comma makes it a tuple even without parentheses\n</code></pre> <p>Tuples use parentheses <code>()</code> but the comma is what actually makes it a tuple. For a single-element tuple, the comma is essential because <code>(42)</code> is just a number in parentheses, but <code>(42,)</code> is a tuple with one element.</p>"},{"location":"intro-to-python/sets-tuple/#basic-tuple-methods","title":"Basic Tuple Methods","text":""},{"location":"intro-to-python/sets-tuple/#accessing-elements","title":"Accessing Elements","text":"<p>Indexing: <pre><code>colors = (\"red\", \"green\", \"blue\", \"yellow\")\nprint(colors[0])        # \"red\" - first element (index starts at 0)\nprint(colors[1])        # \"green\" - second element  \nprint(colors[-1])       # \"yellow\" - last element (negative indexing)\nprint(colors[-2])       # \"blue\" - second to last element\n</code></pre>  Tuple indexing works like lists. Positive indices start from 0 at the beginning, negative indices start from -1 at the end.</p> <p>Slicing: <pre><code>colors = (\"red\", \"green\", \"blue\", \"yellow\", \"purple\")\nprint(colors[1:3])      # (\"green\", \"blue\") - elements from index 1 to 2\nprint(colors[:2])       # (\"red\", \"green\") - first two elements\nprint(colors[2:])       # (\"blue\", \"yellow\", \"purple\") - from index 2 to end\nprint(colors[::2])      # (\"red\", \"blue\", \"purple\") - every second element\n</code></pre>  Slicing creates a new tuple with selected elements. The syntax is <code>[start:stop:step]</code> where <code>stop</code> is not included in the result.</p>"},{"location":"intro-to-python/sets-tuple/#built-in-tuple-methods","title":"Built-in Tuple Methods","text":"<p>count() method: <pre><code>numbers = (1, 2, 3, 2, 4, 2, 5)\ncount_of_2 = numbers.count(2)      # Returns 3 (appears 3 times)\ncount_of_7 = numbers.count(7)      # Returns 0 (doesn't appear)\n</code></pre>  The <code>count()</code> method returns how many times a specific element appears in the tuple. If the element doesn't exist, it returns 0.</p> <p>index() method: <pre><code>numbers = (1, 2, 3, 2, 4, 2, 5)\nfirst_2_index = numbers.index(2)      # Returns 1 (first occurrence at index 1)\n# numbers.index(7)                    # Would raise ValueError since 7 doesn't exist\n\n# Find index starting from a specific position\nlater_2_index = numbers.index(2, 2)   # Returns 3 (first occurrence at/after index 2)\n</code></pre>  The <code>index()</code> method returns the position of the first occurrence of an element. If the element doesn't exist, it raises a ValueError. You can optionally specify where to start searching.</p>"},{"location":"intro-to-python/sets-tuple/#tuple-operations","title":"Tuple Operations","text":"<p>Concatenation: <pre><code>tuple1 = (1, 2, 3)\ntuple2 = (4, 5, 6)\ntuple3 = (\"a\", \"b\")\n\ncombined = tuple1 + tuple2      # (1, 2, 3, 4, 5, 6) - creates new tuple\nlong_tuple = tuple1 + tuple2 + tuple3  # (1, 2, 3, 4, 5, 6, 'a', 'b')\n</code></pre>  The <code>+</code> operator creates a new tuple by combining elements from multiple tuples in order. The original tuples remain unchanged.</p> <p>Repetition: <pre><code>base_tuple = (1, 2, 3)\nrepeated = base_tuple * 3       # (1, 2, 3, 1, 2, 3, 1, 2, 3)\nempty_repeat = base_tuple * 0   # () - empty tuple\n</code></pre>  The <code>*</code> operator creates a new tuple by repeating the original tuple a specified number of times.</p> <p>Membership testing: <pre><code>coordinates = (10, 20, 30)\nprint(20 in coordinates)        # True - 20 exists in the tuple\nprint(40 in coordinates)        # False - 40 doesn't exist\nprint(20 not in coordinates)    # False - opposite of \"in\"\n</code></pre>  The <code>in</code> operator works the same way as with sets, checking if an element exists in the tuple.</p> <p>Length: <pre><code>data = (1, \"hello\", 3.14, True, [1, 2, 3])\nprint(len(data))              # 5 - counts number of elements\n</code></pre>  The <code>len()</code> function returns the number of elements in the tuple, regardless of their types.</p>"},{"location":"intro-to-python/sets-tuple/#unpacking-tuples","title":"Unpacking Tuples","text":"<p>Basic unpacking: <pre><code>point = (10, 20)\nx, y = point                    # x gets 10, y gets 20\n\nperson = (\"Alice\", 25, \"Engineer\")\nname, age, job = person         # Each variable gets corresponding element\n</code></pre>  Unpacking assigns each element of the tuple to separate variables. The number of variables must match the number of elements in the tuple.</p> <p>Advanced unpacking with * operator: <pre><code>data = (1, 2, 3, 4, 5)\nfirst, *middle, last = data     # first=1, middle=[2, 3, 4], last=5\nfirst, *rest = data             # first=1, rest=[2, 3, 4, 5]\n*beginning, last = data         # beginning=[1, 2, 3, 4], last=5\n</code></pre>  The <code>*</code> operator collects multiple elements into a list. This allows flexible unpacking when you don't know exactly how many elements you'll have.</p>"},{"location":"intro-to-python/sets-tuple/#key-differences","title":"Key Differences","text":"Feature Set Tuple Ordered No - elements have no fixed position Yes - elements keep their position Duplicates No - automatically removes duplicates Yes - can store identical elements Mutable Yes - can add/remove elements No - cannot change after creation Indexing No - cannot access by position Yes - can access elements by index Use Case Unique collections, math operations Coordinates, fixed data, multiple return values Performance Fast membership testing Fast access by index"},{"location":"intro-to-python/sets-tuple/#common-use-cases","title":"Common Use Cases","text":""},{"location":"intro-to-python/sets-tuple/#sets_1","title":"Sets","text":"<p>Removing duplicates: When you have data with repeated values and only want unique items. <pre><code>grades = [85, 92, 78, 92, 88, 85, 95]\nunique_grades = set(grades)     # {78, 85, 88, 92, 95}\n</code></pre></p> <p>Mathematical operations: When you need to find common elements, differences, or combine collections. <pre><code>students_math = {\"Alice\", \"Bob\", \"Charlie\", \"Diana\"}\nstudents_science = {\"Bob\", \"Diana\", \"Eve\", \"Frank\"}\nboth_subjects = students_math.intersection(students_science)  # {\"Bob\", \"Diana\"}\n</code></pre></p> <p>Fast membership testing: When you frequently need to check if an element exists. <pre><code>valid_codes = {\"A1\", \"B2\", \"C3\", \"D4\"}\nuser_input = \"B2\"\nif user_input in valid_codes:  # Very fast operation\n    print(\"Valid code!\")\n</code></pre></p>"},{"location":"intro-to-python/sets-tuple/#tuples_1","title":"Tuples","text":"<p>Coordinates and paired data: When elements belong together and shouldn't change. <pre><code>location = (40.7128, -74.0060)  # Latitude, longitude for New York\nrgb_color = (255, 128, 0)       # Red, green, blue values\n</code></pre></p> <p>Multiple return values: When a function needs to return several related values. <pre><code>def get_name_age():\n    return (\"John\", 25)         # Return multiple values as tuple\n\nname, age = get_name_age()      # Unpack the returned tuple\n</code></pre></p> <p>Dictionary keys: Since tuples are immutable, they can be used as dictionary keys. <pre><code>coordinates_to_city = {\n    (40.7128, -74.0060): \"New York\",\n    (34.0522, -118.2437): \"Los Angeles\"\n}\n</code></pre></p> <p>Configuration data: When you have settings that shouldn't accidentally change. <pre><code>database_config = (\"localhost\", 5432, \"mydb\", \"user123\")\nhost, port, database, username = database_config\n</code></pre></p>"},{"location":"intro-to-python/setup-env/","title":"Setup Python Environment","text":"<p>Once you have installed python, you can start working with it. Generally when we work with python, we install <code>External Packages</code> which are not part of standard library. These packages are developed by community and are available on PyPI (Python Package Index).  But installing these packages globally can lead to version conflicts. For example, you might have two projects, one which requires <code>pandas v1.5.0</code> and another which requires <code>pandas v2.0.0</code>. Installing both versions globally is not possible and can lead to conflicts. To avoid this, we use <code>Virtual Environments</code> which are isolated environments for each project. This way, we can have different versions of packages for different projects without any conflicts. </p>"},{"location":"intro-to-python/setup-env/#venv-virtual-environment","title":"<code>venv</code> Virtual Environment","text":""},{"location":"intro-to-python/setup-env/#creating-virtual-environment","title":"Creating Virtual Environment","text":"<p>There are several ways to create virtual environments in python. The most common way is to use <code>venv</code> module which is part of standard library. To create a virtual environment, open terminal and navigate to your project directory and run following command</p> <pre><code># if you have python installed as python3\npython -m venv myenv\n\n# else you can use python3\npython3 -m venv myenv\n</code></pre> <p>The above command will create a virtual environment named <code>myenv</code> in your project directory. You can name it anything you want. </p>"},{"location":"intro-to-python/setup-env/#activating-virtual-environment","title":"Activating Virtual Environment","text":"<p>After creating the virtual environment, you need to activate it. To activate the virtual environment, run following command</p> <pre><code># on Windows\nmyenv\\Scripts\\activate\n# on MacOS and Linux\nsource myenv/bin/activate\n</code></pre> <p>After activating the virtual environment, you will see the name of the virtual environment in your terminal prompt. This indicates that you are now working inside the virtual environment.</p> <p></p>"},{"location":"intro-to-python/setup-env/#deactivating-virtual-environment","title":"Deactivating Virtual Environment","text":"<p>To deactivate the virtual environment, simply run</p> <pre><code>deactivate\n</code></pre> <p>you can confirm this by checking the terminal prompt, it should not have the name of the virtual environment anymore.</p> <p></p>"},{"location":"intro-to-python/setup-env/#conda-virtual-environment","title":"<code>Conda</code> Virtual Environment","text":"<p>Anaconda is also a popular virtual environment management solution, it also has an open source version which can be used without any licensing cost. This is typically easy to manage and share compared to <code>venv</code>.</p> <p>Checkout Installation documentation to add conda to your system and your path.</p>"},{"location":"intro-to-python/setup-env/#creating-conda-virtual-environment","title":"Creating Conda Virtual Environment","text":"<p>To create environment at minimum you just have to pass env name, along with that you can also mention python package  or version that you want to install initially. </p> <p><pre><code># Create conda env with name `mycondaenv` and python version 3.12\nconda create -n mycondaenv python==3.12\n</code></pre> This will install all necessary packages to run python=3.12</p>"},{"location":"intro-to-python/setup-env/#activate-virtual-environment","title":"Activate Virtual Environment","text":"<p>Conda stored all packages and envs in its own directory, so you can activate the env from anywhere in your system. To activate the virtual environment, run following command</p> <p><pre><code>conda activate mycondaenv\n</code></pre> After activating the virtual environment, you will see the name of the virtual environment in your terminal prompt. This indicates that you are now working inside the virtual environment.</p>"},{"location":"intro-to-python/setup-env/#deactivate-virtual-environment","title":"Deactivate Virtual Environment","text":"<p>To deactivate conda environment, you can run the following command</p> <pre><code>conda deactivate\n</code></pre> <p>This will deactivate whatever conda environment is running currently.</p>"},{"location":"intro-to-python/variables/","title":"Variables","text":"<p>Variables in simple language are the names assigned to value, so that instead of the value you can just refer to this variable name throughout your code. e.g. If we want to refer to my age in code, instead of writing the value 30, I can just assign this value to a variable</p> <pre><code>my_age = 30\n</code></pre> <p>and now, I can use this variable my_age in my code instead of the value 30. You might ask, why do we do this? Imagine you are writing a code where you are going to use this value at 10 different places, If you don't define the variable and directly use the value, then if you want to change the value from 30 to 31, you'll have to make changes at all 10 places, which make the probability of making error more. But if we use the variable in our python file, then we can just reassign new value to my_age and then this new value will be used everywhere. </p> <p>Here is an example of this</p> <pre><code># Python code for various checks on age with variable\n\nmy_age = 30\n\nif my_age &lt; 25: \n    print('you can not drink')\nif my_age &lt; 18: \n    print('you can not vote')\nif my_age &lt; 16: \n    print('you can not drive')\nif my_age &lt; 14: \n    print('you can not work')\nif my_age &lt; 10: \n    print('you can not stay awake after 10 PM')\n</code></pre> <p>now in above case, if I want to check for any age, I can simply change the value of age and run the code. But if I directly use the value instead of variable, I might make mistake</p> <pre><code># Python code for various checks on age without variable\nif 30 &lt; 25: \n    print('you can not drink')\nif 10 &lt; 18:  #  Accidentally wrote 10 instead of 30  \n    print('you can not vote')\nif 30 &lt; 16: \n    print('you can not drive')\nif 30 &lt; 14: \n    print('you can not work')\nif 30 &lt; 10: \n    print('you can not stay awake after 10 PM')\n</code></pre>"},{"location":"intro-to-python/variables/#defining-variables","title":"Defining variables","text":"<p>In theory, variables can be anything from sensible words like fruit_name , title , is_available to big sentences with either camel xasing vehicleNumer , mathScore or snake casing valid_driver_license_numer , total_test_score . It might contain numbers like is_18 , more_than_30 , or it can start with <code>_</code> such as _5_fruits_names , _3subjectAvg. It can be completely random as dsdfudfgsfs , fdFDSFS_232 , etc. </p> <p>Here are few rules that we need to follow</p> <ul> <li>Variable name can not start with number</li> <li>Variable name can not have special characters </li> </ul>"},{"location":"intro-to-python/variables/#reserve-keywords","title":"Reserve keywords","text":"<p>While variables can be anything, python does not allow few words as variable as they are used internally by python. e.g. <code>True</code>, <code>def</code> , <code>class</code> ,etc. Here is a list of keywords that we can not use. </p>"}]}